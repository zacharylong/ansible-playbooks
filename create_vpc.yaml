---
- hosts: localhost
  gather_facts: no
  module_defaults:
    group/aws:
      #profile: auburn
      region: "us-east-2"
  tasks:

    - name: Create VPC
      ec2_vpc_net:
        name: image-gallery-vpc3
        cidr_block: 10.0.0.0/16
        tags:
          Module: 5
        state: present
      register: vpc
    - name: debug
      debug:
        var: vpc

    - name: Create Public subnet
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Image Gallery Public
          Module: 5
        cidr: 10.0.1.0/24
        az: us-east-2a
        state: present
      register: public_subnet

    - name: Create Second Public subnet
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Image Gallery Public 2
          Module: 5
        cidr: 10.0.2.0/24
        az: us-east-2b
        state: present
      register: public_subnet_2

    - name: Create Private subnet
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        az: us-east-2a
        tags:
          Name: Image Gallery Private
          Module: 5
        cidr: 10.0.3.0/24
        state: present
      register: private_subnet

    - name: Create Second Private Subnet for RDS
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        az: "us-east-2b"
        tags:
          Name: Image Gallery Private 2
          Module: 5
        cidr: 10.0.4.0/24
        state: present
      register: private_subnet_2

    - name: Create Internet Gateway
      ec2_vpc_igw: 
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: image-gallery-igw3
        state: present
      register: igw

    - name: Create public route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5
        subnets:
          - "{{ public_subnet.subnet.id }}"
          - "{{ public_subnet_2.subnet.id }}"
        routes: 
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        state: present

    - name: Create developer security group
      ec2_group:
        name: Module5-developer-sg
        description: Developer security group
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: tcp
            ports:
            - 22
            - 80
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 22 and 80
        state: present
      register: developer_sg

    - name: Create NAT
      ec2_vpc_nat_gateway:
        if_exist_do_not_create: yes
        subnet_id: "{{ public_subnet.subnet.id }}"
        wait: yes
        state: present
      register: new_nat_gateway

    - name: Create 2nd NAT
      ec2_vpc_nat_gateway:
        if_exist_do_not_create: yes
        subnet_id: "{{ public_subnet_2.subnet.id }}"
        wait: yes
        state: present
      register: new_nat_gateway_2

    - name: "Create and associate production DMZ network ACL with DMZ subnets"
      ec2_vpc_nacl:
        vpc_id: "{{ vpc.vpc.id }}"
        name: m5-public-acl
        subnets: ["{{ public_subnet.subnet.id }}", "{{ private_subnet.subnet.id }}", "{{ public_subnet_2.subnet.id }}", "{{ private_subnet_2.subnet.id }}"]
        tags:
          Name: M5 Public ACL
          Module: 5
          Description: M5 Ansible Public ACL
        ingress:
            # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code,
            #                                             port from, port to
            - [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22]
            - [200, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80]
            - [900, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535]
        egress:
            - [100, 'all', 'allow', '0.0.0.0/0', null, null, null, null]
        state: 'present'
      register: public_acl

    - name: Create Userservice Security Group
      ec2_group:
        name: sec-userservice
        description: M5 allow connections from tagged machines
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
        state: present
      register: sg_userservice

    - name: Create Userservice Security TAG Group
      ec2_group:
        name: sec-userservice-tag
        description: M5 tag to allow access to userservices
        vpc_id: "{{ vpc.vpc.id }}"
        rules_egress:
        - proto: all
          from_port: #8080
          to_port: #8080
          group_id: "{{ sg_userservice.group_id }}"
        state: present
      register: sg_userservice_tag

    - name: Add access to userservice from tag
      ec2_group:
        name: sec-userservice
        description: M5 allow connections from tagged machines
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
        - proto: all
          from_port: #8080
          to_port: #8080
          group_id: "{{ sg_userservice_tag.group_id }}"
        state: present
      register: sg_userservice